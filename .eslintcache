[{"C:\\VSCode Projects\\Web Projects\\eventgraphia\\src\\index.js":"1","C:\\VSCode Projects\\Web Projects\\eventgraphia\\src\\App.js":"2","C:\\VSCode Projects\\Web Projects\\eventgraphia\\src\\Image.js":"3"},{"size":231,"mtime":1607502500698,"results":"4","hashOfConfig":"5"},{"size":3523,"mtime":1607621706310,"results":"6","hashOfConfig":"5"},{"size":210,"mtime":1607524643753,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"12tgd7p",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\VSCode Projects\\Web Projects\\eventgraphia\\src\\index.js",[],["16","17"],"C:\\VSCode Projects\\Web Projects\\eventgraphia\\src\\App.js",["18"],"import React, { useState } from \"react\";\r\nimport { Image } from \"./Image\";\r\nimport { useEffect } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nexport const App = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [imageNumbers, setImageNumbers] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalImageNumber, setModalImageNumber] = useState();\r\n\r\n  const showThumb = (imageNumber) => {\r\n    setModalImageNumber(imageNumber);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    showThumb(modalImageNumber);\r\n  }, [modalImageNumber]);\r\n\r\n  const keyPress = (e, { imageNumber }) => {\r\n    if (isModalOpen) {\r\n      if (e.key === \"ArrowRight\") {\r\n        return setModalImageNumber((imageNumber) => imageNumber + 1);\r\n      }\r\n      if (e.key === \"ArrowLeft\") {\r\n        return setModalImageNumber((imageNumber) => imageNumber - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDownload = async (imageNumber) => {\r\n    await fetch(`http://via.placeholder.com/3900x3900?text=${imageNumber}`, {\r\n      mode: \"no-cors\",\r\n      headers: { \"Access-Control-Allow-Origin\": \"*\" },\r\n    }).then(async (response) => {\r\n      const blob = await response.blob();\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = \"image.png\";\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n      return { success: true };\r\n    });\r\n  };\r\n\r\n  const fetchImages = () => {\r\n    let arr = [];\r\n    for (let i = 1; i <= 15; i++) {\r\n      arr.push(count + i);\r\n    }\r\n    setCount((count) => count + 15);\r\n    setImageNumbers([...imageNumbers, ...arr]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchImages();\r\n  }, []);\r\n\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={imageNumbers.length}\r\n      next={() => fetchImages()}\r\n      hasMore={true}\r\n      loader={<h4 style={{ textAlign: \"center\" }}>Loading...</h4>}\r\n      endMessage={\r\n        <p style={{ textAlign: \"center\" }}>\r\n          <b>Yay! You have seen it all</b>\r\n        </p>\r\n      }\r\n    >\r\n      <div className=\"container\">\r\n        {imageNumbers.map((imageNumber) => (\r\n          <>\r\n            {modalImageNumber && (\r\n              <div onKeyDown={(e) => keyPress(e, imageNumber)}>\r\n                <Modal\r\n                  isOpen={isModalOpen}\r\n                  onRequestClose={() => {\r\n                    setIsModalOpen(false);\r\n                    setModalImageNumber(null);\r\n                  }}\r\n                >\r\n                  <button onClick={() => handleDownload(imageNumber)}>\r\n                    Download Image\r\n                  </button>\r\n                  <button\r\n                    style={{ color: \"red\" }}\r\n                    onClick={() => {\r\n                      setIsModalOpen(false);\r\n                      setModalImageNumber(null);\r\n                    }}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <img\r\n                    src={`http://via.placeholder.com/2000x2000?text=${modalImageNumber}`}\r\n                    alt={modalImageNumber}\r\n                  />\r\n                </Modal>\r\n              </div>\r\n            )}\r\n            <div onClick={() => showThumb(imageNumber)}>\r\n              <Image imageNumber={imageNumber} />\r\n            </div>\r\n          </>\r\n        ))}\r\n      </div>\r\n    </InfiniteScroll>\r\n  );\r\n};\r\n","C:\\VSCode Projects\\Web Projects\\eventgraphia\\src\\Image.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":63,"column":6,"nodeType":"25","endLine":63,"endColumn":8,"suggestions":"26"},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchImages'. Either include it or remove the dependency array.","ArrayExpression",["29"],"no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: [fetchImages]",{"range":"32","text":"33"},[1849,1851],"[fetchImages]"]